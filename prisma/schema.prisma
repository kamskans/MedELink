// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// Healthcare Management Models for MedELink

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  userType  UserType
  stackAuthId String? @unique // Stack Auth user ID
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations based on user type
  caseManagerProfile      CaseManagerProfile?
  individualPractitioner  IndividualPractitionerProfile?
  clientProfile          ClientProfile?
  adminProfile           AdminProfile?
  
  // Shared relations
  referrals              Referral[]
  appointments           Appointment[]

  @@map("users")
  @@index([stackAuthId])
  @@index([userType])
}

model CaseManagerProfile {
  id              String  @id @default(cuid())
  userId          String  @unique
  
  // Onboarding tracking
  onboardingStatus OnboardingStatus @default(NOT_STARTED)
  onboardingStep  Int     @default(1)
  
  // Step 1 - Personal Information
  name            String?
  email           String?
  address         String?
  dateOfBirth     DateTime?
  phoneNumber     String?
  qualification   String?
  qualificationYear String?
  profession      String?
  jobTitle        String?
  profilePictureUrl String?
  qualificationDocUrl String?
  
  // Step 2 - About Your Business
  companyName     String?
  companyEmail    String?
  companyPhone    String?
  businessType    String? // ltd-company, partnership, other
  rehabilitationClients String? @db.Text
  regulatoryBody  String?
  practiceRestrictions String?
  cqcRegulated    String?
  additionalTraining String?
  companyAddress  String?
  companyLogoUrl  String?
  
  // Step 3 - Governance
  registrationNumber String?
  insuranceDocUrl String?
  videoIntroUrl   String?
  termsAccepted   Boolean @default(false)
  
  // Metadata
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("case_manager_profiles")
  @@index([onboardingStatus])
}

model IndividualPractitionerProfile {
  id            String   @id @default(cuid())
  userId        String   @unique
  
  // Onboarding tracking
  onboardingStatus OnboardingStatus @default(NOT_STARTED)
  onboardingStep  Int     @default(1)
  
  // Profile information
  specialization String?
  licenseNumber String?
  verified      Boolean  @default(false)
  phone         String?
  bio           String?
  yearsOfExperience Int?
  
  // Similar onboarding fields as case manager
  name          String?
  email         String?
  address       String?
  dateOfBirth   DateTime?
  qualification String?
  
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("individual_practitioner_profiles")
  @@index([onboardingStatus])
}

model ClientProfile {
  id          String   @id @default(cuid())
  userId      String   @unique
  
  // Client specific fields
  dateOfBirth DateTime?
  phoneNumber String?
  address     String?
  emergencyContact String?
  medicalHistory String? @db.Text
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Client can be associated with multiple referrals/appointments
  referrals    Referral[]
  appointments Appointment[]

  @@map("client_profiles")
}

model AdminProfile {
  id          String   @id @default(cuid())
  userId      String   @unique
  
  // Admin specific fields
  department  String?
  role        String?
  permissions Json?    // Store admin permissions as JSON
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("admin_profiles")
}

model Referral {
  id          String        @id @default(cuid())
  clientId    String
  caseManagerId String
  specialization String
  urgency     ReferralUrgency @default(NORMAL)
  description String?
  status      ReferralStatus  @default(PENDING)
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt

  client      ClientProfile @relation(fields: [clientId], references: [id], onDelete: Cascade)
  caseManager User   @relation(fields: [caseManagerId], references: [id], onDelete: Cascade)
  
  appointments Appointment[]

  @@map("referrals")
}

model Appointment {
  id                      String            @id @default(cuid())
  referralId              String?
  clientId                String
  professionalId          String
  scheduledAt             DateTime
  duration                Int               @default(60) // minutes
  status                  AppointmentStatus @default(SCHEDULED)
  notes                   String?
  createdAt               DateTime          @default(now())
  updatedAt               DateTime          @updatedAt

  referral               Referral? @relation(fields: [referralId], references: [id], onDelete: SetNull)
  client                 ClientProfile    @relation(fields: [clientId], references: [id], onDelete: Cascade)
  professional           User      @relation(fields: [professionalId], references: [id], onDelete: Cascade)

  @@map("appointments")
}

// File uploads tracking
model FileUpload {
  id          String   @id @default(cuid())
  fileName    String
  fileType    String
  fileSize    Int
  url         String
  uploadedBy  String
  entityType  String   // 'caseManager', 'practitioner', etc.
  entityId    String   // ID of the profile
  fieldName   String   // 'profilePicture', 'qualification', etc.
  
  createdAt   DateTime @default(now())
  
  @@map("file_uploads")
  @@index([entityType, entityId])
  @@index([uploadedBy])
}

// Enums
enum UserType {
  CASE_MANAGER
  INDIVIDUAL_PRACTITIONER
  CLIENT
  ADMIN
}

enum OnboardingStatus {
  NOT_STARTED
  IN_PROGRESS
  COMPLETED
}

enum ReferralUrgency {
  LOW
  NORMAL
  HIGH
  URGENT
}

enum ReferralStatus {
  PENDING
  ACCEPTED
  ASSIGNED
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum AppointmentStatus {
  SCHEDULED
  CONFIRMED
  IN_PROGRESS
  COMPLETED
  CANCELLED
  NO_SHOW
}