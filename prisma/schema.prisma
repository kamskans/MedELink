// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// Healthcare Management Models for MedELink

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  role      UserRole @default(CASE_MANAGER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Case Manager specific
  caseManagerProfile CaseManagerProfile?
  referrals          Referral[]

  // Healthcare Professional specific
  healthcareProfessionalProfile HealthcareProfessionalProfile?
  appointments                  Appointment[]

  @@map("users")
}

model CaseManagerProfile {
  id           String @id @default(cuid())
  userId       String @unique
  organization String?
  phone        String?
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("case_manager_profiles")
}

model HealthcareProfessionalProfile {
  id            String   @id @default(cuid())
  userId        String   @unique
  specialization String
  licenseNumber String?
  verified      Boolean  @default(false)
  phone         String?
  bio           String?
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("healthcare_professional_profiles")
}

model Client {
  id          String   @id @default(cuid())
  name        String
  email       String?
  phone       String?
  dateOfBirth DateTime?
  condition   String?
  notes       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  referrals    Referral[]
  appointments Appointment[]

  @@map("clients")
}

model Referral {
  id          String        @id @default(cuid())
  clientId    String
  caseManagerId String
  specialization String
  urgency     ReferralUrgency @default(NORMAL)
  description String?
  status      ReferralStatus  @default(PENDING)
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt

  client      Client @relation(fields: [clientId], references: [id], onDelete: Cascade)
  caseManager User   @relation(fields: [caseManagerId], references: [id], onDelete: Cascade)
  
  appointments Appointment[]

  @@map("referrals")
}

model Appointment {
  id                      String            @id @default(cuid())
  referralId              String?
  clientId                String
  healthcareProfessionalId String
  scheduledAt             DateTime
  duration                Int               @default(60) // minutes
  status                  AppointmentStatus @default(SCHEDULED)
  notes                   String?
  createdAt               DateTime          @default(now())
  updatedAt               DateTime          @updatedAt

  referral               Referral? @relation(fields: [referralId], references: [id], onDelete: SetNull)
  client                 Client    @relation(fields: [clientId], references: [id], onDelete: Cascade)
  healthcareProfessional User      @relation(fields: [healthcareProfessionalId], references: [id], onDelete: Cascade)

  @@map("appointments")
}

enum UserRole {
  CASE_MANAGER
  HEALTHCARE_PROFESSIONAL
  ADMIN
}

enum ReferralUrgency {
  LOW
  NORMAL
  HIGH
  URGENT
}

enum ReferralStatus {
  PENDING
  ACCEPTED
  ASSIGNED
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum AppointmentStatus {
  SCHEDULED
  CONFIRMED
  IN_PROGRESS
  COMPLETED
  CANCELLED
  NO_SHOW
}
